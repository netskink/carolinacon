
use this to adjust winheights
winheight reg 18
winheight asm 30
winheight cmd 5


In june, use a 6 at the end of the key.
as soon as you enter the checkkey routine.
It will fail eventually with a jump to checkkey+473

call strcpy(0xbffff2ca,"b07ddfcefayu060b")
(gdb) print /s (char *) 0xbffff2ca
$13 = 0xbffff2ca "b07ddfcefayu060b"


+-------------------------+
| STRING b07ddfcefayu060b |
| STRING b07dbfcefayu060b | test1
+-------------------------+
| OFFSET 0123456789abcdef |
+-------------------------+



Examining this part of the code, we have the following:

   │0x80486f2 <checkkey+362>        add    $0x3,%eax 
   │0x80486f5 <checkkey+365>        movzbl (%eax),%eax
   │0x80486f8 <checkkey+368>        cmp    $0x64,%al 
   │0x80486fa <checkkey+370>        jne    0x804875e <checkkey+470> 
   │0x80486fc <checkkey+372>        mov    0x8(%ebp),%eax
   │0x80486ff <checkkey+375>        add    $0x4,%eax
   │0x8048702 <checkkey+378>        movzbl (%eax),%eax
   │0x8048705 <checkkey+381>        mov    %al,-0x9(%ebp)
   │0x8048708 <checkkey+384>        mov    0x8(%ebp),%eax
   │0x804870b <checkkey+387>        add    $0x8,%eax
   │0x804870e <checkkey+390>        movzbl (%eax),%eax
   │0x8048711 <checkkey+393>        mov    %al,-0xa(%ebp)
   │0x8048714 <checkkey+396>        mov    0x8(%ebp),%eax
   │0x8048717 <checkkey+399>        add    $0x5,%eax
   │0x804871a <checkkey+402>        movzbl (%eax),%eax
   │0x804871d <checkkey+405>        mov    %al,-0xb(%ebp)
   │0x8048720 <checkkey+408>        mov    0x8(%ebp),%eax
   │0x8048723 <checkkey+411>        add    $0x7,%eax
   │0x8048726 <checkkey+414>        movzbl (%eax),%eax
   │0x8048729 <checkkey+417>        mov    %al,-0xc(%ebp)
  >│0x804872c <checkkey+420>        cmpb   $0x62,-0x9(%ebp)
   │0x8048730 <checkkey+424>        jne    0x8048761 <checkkey+473>
   │0x8048732 <checkkey+426>        cmpb   $0x66,-0xa(%ebp)




Lets go up a little further and resume from the call to checkhash

B+>│0x8048635 <checkkey+173>        call   0x804854a <checkhash>                              │
   │0x804863a <checkkey+178>        test   %eax,%eax                                          │
   │0x804863c <checkkey+180>        jne    0x8048755 <checkkey+461>                           │
   │0x8048642 <checkkey+186>        mov    0x8(%ebp),%eax                                     │
   │0x8048645 <checkkey+189>        add    $0xc,%eax                                          │
   │0x8048648 <checkkey+192>        movzbl (%eax),%eax                                        │
   │0x804864b <checkkey+195>        mov    %al,-0xf(%ebp)                                     │
   │0x804864e <checkkey+198>        mov    0x8(%ebp),%eax                                     │
   │0x8048651 <checkkey+201>        add    $0xd,%eax                                          │
   │0x8048654 <checkkey+204>        movzbl (%eax),%eax                                        │
   │0x8048657 <checkkey+207>        mov    %al,-0xe(%ebp)                                     │
   │0x804865a <checkkey+210>        movb   $0x0,-0xd(%ebp)                                    │
   │0x804865e <checkkey+214>        movl   $0x0,(%esp)                                        │
   │0x8048665 <checkkey+221>        call   0x8057f10 <time>                                   │
   │0x804866a <checkkey+226>        mov    %eax,-0x18(%ebp)                                   │
   │0x804866d <checkkey+229>        lea    -0x18(%ebp),%eax                                   │
   │0x8048670 <checkkey+232>        mov    %eax,(%esp)                                        │
   │0x8048673 <checkkey+235>        call   0x8057eb0 <localtime>                              │
   │0x8048678 <checkkey+240>        mov    %eax,-0x1c(%ebp)                                   │
   │0x804867b <checkkey+243>        mov    -0x1c(%ebp),%eax                                   │
   │0x804867e <checkkey+246>        mov    0x10(%eax),%eax                                    │
   │0x8048681 <checkkey+249>        add    $0x1,%eax                                          │
   │0x8048684 <checkkey+252>        mov    %eax,-0x20(%ebp)                                   │
after checkkey+252, eax is 0x6.
   │0x8048687 <checkkey+255>        cmpl   $0x9,-0x20(%ebp)                                   │
   │0x804868b <checkkey+259>        jg     0x80486b1 <checkkey+297>                           │
   │0x804868d <checkkey+261>        movb   $0x30,-0x12(%ebp)                                  │
   │0x8048691 <checkkey+265>        mov    $0x80abb72,%eax                                    │
   │0x8048696 <checkkey+270>        mov    -0x20(%ebp),%edx                                   │
   │0x8048699 <checkkey+273>        mov    %edx,0x8(%esp)                                     │
   │0x804869d <checkkey+277>        mov    %eax,0x4(%esp)                                     │
   │0x80486a1 <checkkey+281>        lea    -0x12(%ebp),%eax                                   │
   │0x80486a4 <checkkey+284>        add    $0x1,%eax                                          │
   │0x80486a7 <checkkey+287>        mov    %eax,(%esp)                                        │
Examining the stack prior to the sprintf call.
d) x/4xw $esp
0xbffff240:     0xbffff267      0x080abb72      0x00000006      0x08055257
(gdb) x/s 0xbffff267
0xbffff267:      "\b\312\060\066"
(gdb) x/s 0x080abb72
0x80abb72:       "%d"
(gdb) 
   │0x80486aa <checkkey+290>        call   0x8049ee0 <sprintf>                                │
(gdb) x/s 0xbffff267
0xbffff267:      "6"
   │0x80486af <checkkey+295>        jmp    0x80486cc <checkkey+324>                           │
Above is a hard coded jump to right after the sprintf below.
   │0x80486b1 <checkkey+297>        mov    $0x80abb72,%eax                                    │
   │0x80486b6 <checkkey+302>        mov    -0x20(%ebp),%edx                                   │
   │0x80486b9 <checkkey+305>        mov    %edx,0x8(%esp)                                     │
   │0x80486bd <checkkey+309>        mov    %eax,0x4(%esp)                                     │
   │0x80486c1 <checkkey+313>        lea    -0x12(%ebp),%eax                                   │
   │0x80486c4 <checkkey+316>        mov    %eax,(%esp)                                        │
   │0x80486c7 <checkkey+319>        call   0x8049ee0 <sprintf>                              
(gdb) x/4wx $ebp-0xf
0xbffff269:     0xd0003630      0xe0080cf6      0x00080499      0xe8c1ca6e
   │0x80486cc <checkkey+324>        lea    -0xf(%ebp),%eax                                    │
│eax            0xbffff269       -1073745303  
   │0x80486cf <checkkey+327>        mov    %eax,0x4(%esp)                                     │
(gdb) x/4wx $esp+4
0xbffff244:     0xbffff269      0x00000006      0x08055257      0x66000009
(gdb) x/s 0xbffff269
0xbffff269:      "06"
   │0x80486d3 <checkkey+331>        lea    -0x12(%ebp),%eax                                   │
(gdb) x/4xw $ebp-0x12
0xbffff266:     0x30003630      0xf6d00036      0x99e0080c      0x6e000804
│eax            0xbffff266       -1073745306                                                  │
gdb) x/s 0xbffff266
0xbffff266:      "06"
   │0x80486d6 <checkkey+334>        mov    %eax,(%esp)                                        │
(gdb) x/4xw $esp
0xbffff240:     0xbffff266      0xbffff269      0x00000006      0x08055257
(gdb) x/s 0xbffff266
0xbffff266:      "06"
(gdb) x/s 0xbffff269
0xbffff269:      "06"
Both of the strings it comprares next are the same.
   │0x80486d9 <checkkey+337>        call   0x80568f0 <strcmp>                                 │
   │0x80486de <checkkey+342>        test   %eax,%eax                                          │
   │0x80486e0 <checkkey+344>        jne    0x8048758 <checkkey+464>                           │
(gdb) x/4xw $ebp+8
0xbffff280:     0xbffff2ca      0xbffff2ca      0xbffff38c      0xbffff2b8
   │0x80486e2 <checkkey+346>        mov    0x8(%ebp),%eax                                     │
│eax            0xbffff2ca       -1073745206      
   │0x80486e5 <checkkey+349>        add    $0x2,%eax                                          │
│eax            0xbffff2cc       
   │0x80486e8 <checkkey+352>        movzbl (%eax),%eax                                        │
(gdb) x/s  0xbffff2cc
0xbffff2cc:      "7ddfcefayu060b"
│eax            0x37     55      
   │0x80486eb <checkkey+355>        cmp    $0x37,%al                                          │
   │0x80486ed <checkkey+357>        jne    0x804875b <checkkey+467>                           │
The above jump is not taken.  The continues at checkkey+359
The next part of code looks like it will put the value at offset 0x3 from our key and compare it
with ascci "d"
   │0x80486ef <checkkey+359>        mov    0x8(%ebp),%eax                                     │
   │0x80486f2 <checkkey+362>        add    $0x3,%eax                                          │
│eax            0xbffff2cd      
(gdb) x/s 0xbffff2cd
0xbffff2cd:      "ddfcefayu060b"
   │0x80486f5 <checkkey+365>        movzbl (%eax),%eax                                        │
   │0x80486f8 <checkkey+368>        cmp    $0x64,%al                                          │
   │0x80486fa <checkkey+370>        jne    0x804875e <checkkey+470>                           │
This jump does not take place since we have a "d" in that postion.


This part looks a little tricky.
   │0x80486fc <checkkey+372>        mov    0x8(%ebp),%eax                                     │
   │0x80486ff <checkkey+375>        add    $0x4,%eax                                          │
   │0x8048702 <checkkey+378>        movzbl (%eax),%eax                                        │
At this point the "d" from offset 0x4 is in eax.
Hmm. 8+$ebp is our key. Perhaps $ebp-9 is a local.
(gdb) x/4xw $ebp-9
0xbffff26f:     0x0499e008      0xca6e0008      0xfff2e8c1      0x048806bf
   │0x8048705 <checkkey+381>        mov    %al,-0x9(%ebp)                                     │
(gdb) x/4xw $ebp-9
0xbffff26f:     0x0499e064      0xca6e0008      0xfff2e8c1      0x048806bf
   │0x8048708 <checkkey+384>        mov    0x8(%ebp),%eax                                     │
   │0x804870b <checkkey+387>        add    $0x8,%eax                                          │
   │0x804870e <checkkey+390>        movzbl (%eax),%eax                                        │
This looks like put offset 8 from our key into eax. Offset 8 is "f" from the "face" part
we did the checkhash part on earlier.
│eax            0x66     102      
(gdb) x/4xw $ebp-8 
0xbffff270:     0x080499e0      0xc1ca6e00      0xbffff2e8      0x08048806
   │0x8048711 <checkkey+393>        mov    %al,-0xa(%ebp)                                     │
(gdb) x/4xw $ebp-10
0xbffff26e:     0x99e06466      0x6e000804      0xf2e8c1ca      0x8806bfff
He does this but lets it sit. odd.

   │0x8048714 <checkkey+396>        mov    0x8(%ebp),%eax                                     │
   │0x8048717 <checkkey+399>        add    $0x5,%eax                                          │
   │0x804871a <checkkey+402>        movzbl (%eax),%eax                                        │
This moves the 5th offset, which is "f" to eax.
│eax            0x66     102   
(gdb) x/4xw $ebp-0xb
0xbffff26d:     0xe06466f6      0x00080499      0xe8c1ca6e      0x06bffff2
   │0x804871d <checkkey+405>        mov    %al,-0xb(%ebp)                                     │
(gdb) x/4xw $ebp-0xb
0xbffff26d:     0xe0646666      0x00080499      0xe8c1ca6e      0x06bffff2
   │0x8048720 <checkkey+408>        mov    0x8(%ebp),%eax                                     │
   │0x8048723 <checkkey+411>        add    $0x7,%eax                                          │
   │0x8048726 <checkkey+414>        movzbl (%eax),%eax                                        │
This moves the 7th offset which is "e" to eax.
│eax            0x65     101      
(gdb) x/4xw $ebp-0xc
0xbffff26c:     0x646666d0      0x080499e0      0xc1ca6e00      0xbffff2e8
   │0x8048729 <checkkey+417>        mov    %al,-0xc(%ebp)                                     │
(gdb) x/4xw $ebp-0xc
0xbffff26c:     0x64666665      0x080499e0      0xc1ca6e00      0xbffff2e8
   │0x804872c <checkkey+420>        cmpb   $0x62,-0x9(%ebp)                                   │
(gdb) x/4xw $ebp-0x9
0xbffff26f:     0x0499e064      0xca6e0008      0xfff2e8c1      0x048806bf
This comparison will fail.
He is looking for a "b" at 0xbffff26f

test one: call strcpy(0xbffff2ca,"b07dbfcefayu060b")

   │0x8048730 <checkkey+424>        jne    0x8048761 <checkkey+473>                           │

   │0x8048732 <checkkey+426>        cmpb   $0x66,-0xa(%ebp)                                   │
   │0x8048736 <checkkey+430>        jne    0x8048764 <checkkey+476>                           │

   │0x8048738 <checkkey+432>        movzbl -0xb(%ebp),%eax                                    │
   │0x804873c <checkkey+436>        cmp    -0xc(%ebp),%al                                     │
Here he is looking for a 0x65 or "e"
   │0x804873f <checkkey+439>        jne    0x8048767 <checkkey+479>                           │
test two: call strcpy(0xbffff2ca,"b07dbecefayu060b")
as a result of using this string, it give this after letting it run.
ok so far
checking key: b07dbecefayu060b
The flag is: 0e8067af7e8dcebb30b5c74518ab69b7
good job!


   │0x8048741 <checkkey+441>        cmpb   $0x65,-0xb(%ebp)                                   │
   │0x8048745 <checkkey+445>        jne    0x804876a <checkkey+482>                           │
   │0x8048747 <checkkey+447>        mov    $0x0,%eax                                          │
   │0x804874c <checkkey+452>        jmp    0x804876d <checkkey+485>                           │
   │0x804874e <checkkey+454>        mov    $0x1,%eax                                          │
   │0x8048753 <checkkey+459>        jmp    0x804876d <checkkey+485>                           │
   │0x8048755 <checkkey+461>        nop                                              


Hmm. I checked the answer and this is not correct.  I can only guess
that its wrong for the two possible reasons.
1. After the key is used, it is pulled from a different postion when it
does the "The flag is xxxxxxx" message.  After looking at the code, in the 
"printflag" routine it appears to use the same location for the printflag
routine. ie. it use address 0xbffff2ca and its just a md5sumtostr routine
which it does in there.

2. The key which I have generated uses the month of june.  Since this code
was given at carolinacon in May that generate a different checksum with the key.
Given possiblitly one above is wrong this must be the problem.

So, in order to get checkkey to pass, do this
call strcpy(0xbffff2ca,"b07dbecefayu060b")
as soon as you enter the check key routine.
This will bypass the timecheck for the month of june
in the routine.

Then set the breakpoint at printflag
and as soon as you enter this routine do this
call strcpy(0xbffff2ca,"b07dbecefayu050b")
This will reuse the month of may in the byte to get
a hash for the answer key.

--- The result ----
ok so far
checking key: b07dbecefayu060b
The flag is: 203ca7c83e1ca292316aa938bda73c71
----------------------------------------------------













































